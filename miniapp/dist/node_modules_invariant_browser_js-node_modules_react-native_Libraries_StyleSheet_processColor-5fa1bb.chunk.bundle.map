{"version":3,"sources":["webpack://org-mini-app/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs","webpack://org-mini-app/node_modules/invariant/browser.js","webpack://org-mini-app/node_modules/react-native/Libraries/Utilities/NativePlatformConstantsAndroid.js","webpack://org-mini-app/node_modules/react-native/src/private/specs/modules/NativePlatformConstantsAndroid.js","webpack://org-mini-app/node_modules/react-native/Libraries/StyleSheet/PlatformColorValueTypes.android.js","webpack://org-mini-app/node_modules/react-native/Libraries/StyleSheet/normalizeColor.js","webpack://org-mini-app/node_modules/react-native/Libraries/StyleSheet/processColor.js","webpack://org-mini-app/node_modules/react-native/Libraries/StyleSheet/processColorArray.js","webpack://org-mini-app/node_modules/react-native/Libraries/Utilities/Platform.android.js"],"names":["WeakMap","cacheBabelInterop","cacheNodeInterop","_getRequireWildcardCache","nodeInterop","obj","Object","hasPropertyDescriptor","desc","args","argIndex","Error","_default","_NativePlatformConstantsAndroid","PlatformColor","normalizeColorObject","processColorObject","require","_normalizecolors","Platform","normalizeColor","normalizedColor","TRANSPARENT","colors","processColorElement","_processColor","console","spec"],"mappings":"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","sourcesContent":["\"use strict\";\n\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) return obj;\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") return { default: obj };\n\n    var cache = _getRequireWildcardCache(nodeInterop);\n\n    if (cache && cache.has(obj)) return cache.get(obj);\n\n    var newObj = { __proto__: null };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n    for (var key in obj) {\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);\n            else newObj[key] = obj[key];\n        }\n    }\n\n    newObj.default = obj;\n\n    if (cache) cache.set(obj, newObj);\n\n    return newObj;\n}\nexports._ = _interop_require_wildcard;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","export * from '../../src/private/specs/modules/NativePlatformConstantsAndroid';\nimport NativePlatformConstantsAndroid from '../../src/private/specs/modules/NativePlatformConstantsAndroid';\nexport default NativePlatformConstantsAndroid;","                                                                               \nimport * as TurboModuleRegistry from '../../../../Libraries/TurboModule/TurboModuleRegistry';\n                                          \n                \n                \n                \n                      \n   \n                                         \n                     \n                                \n                                                \n                  \n                  \n                 \n                      \n                \n                      \n                 \n                \n                       \n   \n                                           \n                                                \n                              \n \nexport default (TurboModuleRegistry.getEnforcing      ('PlatformConstants')      );","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict-local\n */\n\n                                                        \n                                                               \n\n/** The actual type of the opaque NativeColorValue on Android platform */\n                              \n                                 \n  \n\nexport const PlatformColor = (...names               )             => {\n  /* $FlowExpectedError[incompatible-return]\n   * LocalNativeColorValue is the actual type of the opaque NativeColorValue on Android platform */\n  return ({resource_paths: names}                       );\n};\n\nexport const normalizeColorObject = (\n  color                  ,\n)                       => {\n  /* $FlowExpectedError[incompatible-cast]\n   * LocalNativeColorValue is the actual type of the opaque NativeColorValue on Android platform */\n  if ('resource_paths' in (color                       )) {\n    return color;\n  }\n  return null;\n};\n\nexport const processColorObject = (\n  color                  ,\n)                    => {\n  return color;\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict-local\n */\n\n/* eslint no-bitwise: 0 */\n\n                                                        \n                                             \n\nimport _normalizeColor from '@react-native/normalize-colors';\n\nfunction normalizeColor(\n  color                                     ,\n)                       {\n  if (typeof color === 'object' && color != null) {\n    const {normalizeColorObject} = require('./PlatformColorValueTypes');\n    const normalizedColor = normalizeColorObject(color);\n    if (normalizedColor != null) {\n      return normalizedColor;\n    }\n  }\n\n  if (typeof color === 'string' || typeof color === 'number') {\n    return _normalizeColor(color);\n  }\n}\n\nmodule.exports = normalizeColor;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict-local\n */\n\n'use strict';\n\n                                                               \n\nconst Platform = require('../Utilities/Platform');\nconst normalizeColor = require('./normalizeColor');\n\n                                                            \n\n/* eslint no-bitwise: 0 */\nfunction processColor(color                         )                       {\n  if (color === undefined || color === null) {\n    return color;\n  }\n\n  let normalizedColor = normalizeColor(color);\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor === 'object') {\n    const processColorObject =\n      require('./PlatformColorValueTypes').processColorObject;\n\n    const processedColorObj = processColorObject(normalizedColor);\n\n    if (processedColorObj != null) {\n      return processedColorObj;\n    }\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  // Converts 0xrrggbbaa into 0xaarrggbb\n  normalizedColor = ((normalizedColor << 24) | (normalizedColor >>> 8)) >>> 0;\n\n  if (Platform.OS === 'android') {\n    // Android use 32 bit *signed* integer to represent the color\n    // We utilize the fact that bitwise operations in JS also operates on\n    // signed 32 bit integers, so that we can use those to convert from\n    // *unsigned* to *signed* 32bit int that way.\n    normalizedColor = normalizedColor | 0x0;\n  }\n  return normalizedColor;\n}\n\nexport default processColor;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict-local\n */\n\n'use strict';\n\n                                             \n\nimport processColor, {                        } from './processColor';\n\nconst TRANSPARENT = 0; // rgba(0, 0, 0, 0)\n\nfunction processColorArray(\n  colors                             ,\n)                                       {\n  return colors == null ? null : colors.map(processColorElement);\n}\n\nfunction processColorElement(color            )                      {\n  const value = processColor(color);\n  // For invalid colors, fallback to transparent.\n  if (value == null) {\n    console.error('Invalid value in color array:', color);\n    return TRANSPARENT;\n  }\n  return value;\n}\n\nmodule.exports = processColorArray;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict\n */\n\n             \n                           \n                     \n                         \n\nimport NativePlatformConstantsAndroid from './NativePlatformConstantsAndroid';\n\nconst Platform               = {\n  __constants: null,\n  OS: 'android',\n  // $FlowFixMe[unsafe-getters-setters]\n  get Version()         {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.Version;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get constants()    \n                       \n                                  \n                          \n                    \n                    \n                    \n                          \n       \n                    \n                    \n                   \n                        \n                  \n                        \n                   \n                  \n                         \n     {\n    // $FlowFixMe[object-this-reference]\n    if (this.__constants == null) {\n      // $FlowFixMe[object-this-reference]\n      this.__constants = NativePlatformConstantsAndroid.getConstants();\n    }\n    // $FlowFixMe[object-this-reference]\n    return this.__constants;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTesting()          {\n    if (__DEV__) {\n      // $FlowFixMe[object-this-reference]\n      return this.constants.isTesting;\n    }\n    return false;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isDisableAnimations()          {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.isDisableAnimations ?? this.isTesting;\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isTV()          {\n    // $FlowFixMe[object-this-reference]\n    return this.constants.uiMode === 'tv';\n  },\n  // $FlowFixMe[unsafe-getters-setters]\n  get isVision()          {\n    return false;\n  },\n  select:    (spec                       )    =>\n    'android' in spec\n      ? // $FlowFixMe[incompatible-return]\n        spec.android\n      : 'native' in spec\n        ? // $FlowFixMe[incompatible-return]\n          spec.native\n        : // $FlowFixMe[incompatible-return]\n          spec.default,\n};\n\nmodule.exports = Platform;\n"],"x_facebook_sources":[null,null,null,null,null,null,null,null,null],"x_hermes_function_offsets":{"0":[0,176,205,313,334,635,655,849,876,1020,1029,1160,1169,1323,1332,1341,1350,1364,1384,1389,1487,1584,1708,1854,1863,1972,2003,2062,2260,2274,2321,2325,2350,2372,2376]}}