{"version":3,"sources":["webpack://org-mini-app/node_modules/@react-native/assets-registry/path-support.js"],"names":["androidScaleSuffix","ANDROID_BASE_DENSITY","Set","drawableFileTypes","scale","Number","Error","Math","asset","getAndroidAssetSuffix","JSON","getBasePath","basePath"],"mappings":"A,E,M,M,K,G,I,M,K,I,Q,I,I,K,O,I,K,E,E,K,I,K,IAc2B,UAArBA,OASAC,MAoBwBC,MAAAA,KAAAA,IAAI,WAAJA,IAAAA,IAAxBC,IA+CW,E,KAAA,I,KAAA,IAAA,OAAH,Q,EA7Dd,GACoB,KAAA,IAAMH,GAAAA,IAApBI,IAAJ,KAMIC,MAAe,KAAA,KAAnB,KAAA,IAGUC,MAAuC,KAAA,QAAjC,IAANA,KAAAA,OAAAA,IAAAA,IAAV,EAFSC,MAAU,KAASN,IAARG,IAAD,SAAVG,IAAP,EALOP,IAAiC,KAAA,IAAf,IAAzB,EAsBJ,MAIOG,GAAAA,IAAqB,KAACK,KAAD,KAA1B,OACE,EAEaC,MAAAA,KACf,KACYH,UACR,IAGEI,MAAc,WAAA,WAHhB,IAAA,IAKEA,MAAc,KAACV,IAAD,WALhB,IAAA,IADQM,KAAAA,OAAAA,IAAAA,IAAV,MASK,IAAP,EAGF,GAGUK,GAAAA,MAAAA,SAAAA,IAA2BH,KAA3BG,IACM,KAAA,IACJ,KAAC,kBAAD,MACA,KAAC,kBAAD,MACA,KAAC,cAAD,MAJV,EAOF,GACmBH,KACS,SAAA,QAAnBI,GAAyC,QAAA,KAAhD","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict\n * @format\n */\n\n'use strict';\n\n/*:: import type {PackagerAsset} from './registry.js'; */\n\nconst androidScaleSuffix = {\n  '0.75': 'ldpi',\n  '1': 'mdpi',\n  '1.5': 'hdpi',\n  '2': 'xhdpi',\n  '3': 'xxhdpi',\n  '4': 'xxxhdpi',\n};\n\nconst ANDROID_BASE_DENSITY = 160;\n\n/**\n * FIXME: using number to represent discrete scale numbers is fragile in essence because of\n * floating point numbers imprecision.\n */\nfunction getAndroidAssetSuffix(scale /*: number */) /*: string */ {\n  if (scale.toString() in androidScaleSuffix) {\n    // $FlowFixMe[invalid-computed-prop]\n    return androidScaleSuffix[scale.toString()];\n  }\n  // NOTE: Android Gradle Plugin does not fully support the nnndpi format.\n  // See https://issuetracker.google.com/issues/72884435\n  if (Number.isFinite(scale) && scale > 0) {\n    return Math.round(scale * ANDROID_BASE_DENSITY) + 'dpi';\n  }\n  throw new Error('no such scale ' + scale.toString());\n}\n\n// See https://developer.android.com/guide/topics/resources/drawable-resource.html\nconst drawableFileTypes = new Set([\n  'gif',\n  'jpeg',\n  'jpg',\n  'ktx',\n  'png',\n  'svg',\n  'webp',\n  'xml',\n]);\n\nfunction getAndroidResourceFolderName(\n  asset /*: PackagerAsset */,\n  scale /*: number */,\n) /*: string */ {\n  if (!drawableFileTypes.has(asset.type)) {\n    return 'raw';\n  }\n  const suffix = getAndroidAssetSuffix(scale);\n  if (!suffix) {\n    throw new Error(\n      \"Don't know which android drawable suffix to use for scale: \" +\n        scale +\n        '\\nAsset: ' +\n        JSON.stringify(asset, null, '\\t') +\n        '\\nPossible scales are:' +\n        JSON.stringify(androidScaleSuffix, null, '\\t'),\n    );\n  }\n  return 'drawable-' + suffix;\n}\n\nfunction getAndroidResourceIdentifier(\n  asset /*: PackagerAsset */,\n) /*: string */ {\n  return (getBasePath(asset) + '/' + asset.name)\n    .toLowerCase()\n    .replace(/\\//g, '_') // Encode folder structure in file name\n    .replace(/([^a-z0-9_])/g, '') // Remove illegal chars\n    .replace(/^(?:assets|assetsunstable_path)_/, ''); // Remove \"assets_\" or \"assetsunstable_path_\" prefix\n}\n\nfunction getBasePath(asset /*: PackagerAsset */) /*: string */ {\n  const basePath = asset.httpServerLocation;\n  return basePath.startsWith('/') ? basePath.slice(1) : basePath;\n}\n\nmodule.exports = {\n  getAndroidResourceFolderName,\n  getAndroidResourceIdentifier,\n  getBasePath,\n};\n"],"x_facebook_sources":[null],"x_hermes_function_offsets":{"0":[0,80,198,349,518,646]}}