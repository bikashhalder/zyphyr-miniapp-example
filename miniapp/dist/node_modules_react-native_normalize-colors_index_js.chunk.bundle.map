{"version":3,"sources":["webpack://org-mini-app/node_modules/@react-native/normalize-colors/index.js"],"names":["getMatchers","matchers","normalizeKeyword","hwbToRgb","parse360","parsePercentage","hslToRgb","parse1","parseInt","match","parse255","color","t","q","p","l","hue2rgb","h","Math","r","g","b","w","red","green","blue","gray","args","cachedMatchers","RegExp","call","commaSeparatedCall","callWithSlashSeparator","parseFloat","int","num"],"mappings":"A,E,M,M,K,G,I,M,K,I,Q,I,I,K,O,I,K,E,E,K,I,K,I,K,I,K,I,K,I,K,I,K,I,K,I,K,I,K,I,K,I,K,I,QA4cc,Q,EA9bd,GACM,OAAJ,WAOA,OAIiBA,GAAAA,MAAAA,IAIJC,KAAkB,KAAA,KAA/B,MAIyBC,IAAAA,OACzB,OAIaD,KAAiB,KAAA,KAA9B,MAUaA,KAAkB,KAAA,KAA/B,MAsBaA,KAAkB,KAAA,KAA/B,MAgBaA,KAAkB,KAAA,KAA/B,MAIaA,KAAkB,KAAA,KAA/B,MAgBaA,KAAiB,KAAA,KAA9B,MAYaA,KAAkB,KAAA,KAA/B,GA0BaA,KAAiB,KAAA,KAA9B,GAYA,EAVKE,IACCC,OAAc,IAAdA,KACAC,OAAqB,IAArBA,QACqB,IAArBA,KAHDF,UAAAA,MAAAA,IADH,KAzBS,IAAT,IAcGG,IACCF,OAAc,IAAdA,KACAC,OAAqB,IAArBA,QACqB,IAArBA,KAHDC,OAKCC,OAAY,IAAZA,KALDD,MAAAA,IADH,EAXKA,IACCF,IAAc,IAAdA,KACAC,OAAqB,IAArBA,QACqB,IAArBA,KAHDC,OAKCC,OAAY,IAAZA,KALDD,MAAAA,IADH,EAbCA,IACCF,OAAc,IAAdA,KACAC,OAAqB,IAArBA,QACqB,IAArBA,KAHDC,UAAAA,MAAAA,IADH,IAfEE,SACO,IACE,IADPC,OAEO,IAFPA,IAGO,IAHPA,OAIO,IAJPA,IAKO,IALPA,OAMO,IANPA,IAOO,IAPPA,OADFD,QAAAA,IADF,IAJOA,SAAc,OAAdA,QAAAA,IAAP,IAfEA,SACO,IACE,IADPC,OAEO,IAFPA,IAGO,IAHPA,OAIO,IAJPA,IAKO,IALPA,QAAAA,OADFD,QAAAA,IADF,KArBS,IAAT,IAYIE,OAAc,IAAdA,QAAAA,OACe,IAAdA,QAAAA,OACc,IAAdA,QAAAA,IACDH,OAAY,IAAZA,KAHAG,IAAAA,IAAAA,MAAD,IADH,EATMA,IAAc,IAAdA,QAAAA,OACe,IAAdA,QAAAA,OACc,IAAdA,KAAAA,IACDH,OAAY,IAAZA,KAHAG,IAAAA,IAAAA,MAAD,IADH,EAXEA,OAAc,IAAdA,QAAAA,OACe,IAAdA,QAAAA,OACc,IAAdA,QAAAA,IAFDA,IAAAA,OAAAA,MAAD,IADH,EAJA,IALOF,SAAc,QAALC,OAATD,QAAAA,IAAP,IARA,IAPIG,IAAJ,IAAA,cAAA,MAGA,EAFE,EA+IN,cACE,OACEC,IADF,MAGA,IACEA,IADF,UAGA,cAGA,cAGA,IAGA,EAFcC,IAAU,IAAVA,OAAAA,IAALC,IAAP,EAHA,EAHYD,OAAAA,IAAAA,IAALC,IAAP,EAWJ,mBACYC,IAAwBA,IAAQA,IAARA,IAAxBA,KAAe,IAALA,IAAVA,GACA,IAAA,IACAC,GAAAA,cAAcC,MAAdD,OACAA,OACcC,IAAdD,SAGPE,MAAU,QAACC,IAAD,QAAVD,IACAA,MAAU,KAACE,IAAD,QAAVF,IACAA,MAAU,KAACG,IAAD,QAAVH,IAFAA,IAAAA,IADH,EAOF,SACMI,OAAJ,OAMYN,GAAAA,cAAcC,QAAdD,OAA4B,IAAA,IAA5BA,IAAAA,IACEA,OAAoB,IAAA,IAApBA,IAAAA,IACaC,IAAdD,OAA4B,IAAA,IAA5BA,IAAAA,MAGVE,MAAU,QAACK,IAAD,QAAVL,IACAA,MAAU,KAACM,IAAD,QAAVN,IACAA,MAAU,KAACO,IAAD,QAAVP,IAFAA,IAAAA,IADH,IATeA,MAAU,QAAEI,IAAYA,IAAZA,IAAF,QAEfI,OAAeA,OAAeA,IAA9BA,IAAAA,IAAR,EAiBJ,EAAA,IAC+B,SAAA,SAAtB,QAAA,IAAP,EAGF,IAAA,IAGc,KAAIC,QAAAA,IAAJ,MAAyB,SAAA,SADnC,IAGKA,KAAAA,IAAD,QAHJ,IAAA,QAAA,IADF,EASF,EAAA,IAC+B,SAAA,SAAtB,QAAA,IAAP,EAMIC,GAAAA,MAAJ,OACmB,IACNC,MAAeC,QAAAA,WAAR,IAAPD,KAAAA,OAAAA,IAAAA,IADM,IAELA,MAENE,kBAAAA,IAEAC,IAAAA,IAJMH,KAAAA,QACR,QAAA,IAAA,QAAA,OADQA,IAAAA,IAFK,IASNA,UAAeC,WAAR,IAAPD,KAAAA,OAAAA,IAAAA,IATM,IAULA,iBAENE,IAEAC,IAJMH,KAAAA,QACR,IAAA,IAAA,IAAA,OADQA,IAAAA,IAVK,IAiBNA,MAAeC,WAAR,IAAPD,KAAAA,OAAAA,IAAAA,IAjBM,IAkBT,cAlBS,IAmBT,cAnBS,IAoBT,cApBS,IAqBT,cArBS,IAAjBD,IAwBKA,IAAP,EAGF,EACcpB,cAAAA,QACZ,OAGA,IAGA,EAFE,EAHA,EAQJ,EACcyB,WAAAA,WACFC,IAAAA,IAAD,IAAA,IAAT,EAGF,EACcD,WAAAA,OACZ,OAGA,IAGOf,MAAU,QAACiB,IAAD,KAAjB,KAFE,EAHA,EAQJ,EAEcF,WAAAA,OACZ,OAGA,IAGOC,IAAP,KAFE,EAHA,EAQJ,GAEE,IAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,QAAA,QAAA,QAAA,QAAA,QAAA,MAyJA,YAFsB,YADL,YADI,YADL,YADA,YADC,QADG,YADH,YADC,QADH,YADD,QADM,QADE,YADP,QADK,QADA,QADA,YADF,YADD,YADA,YADE,QADA,YADE,YADJ,YADK,QADF,YADA,YADN,QADU,YADP,YADI,YADN,YADA,YADA,YADK,YADC,YADG,YADA,YADJ,YADI,YADP,YADG,YADH,QADG,YADJ,YADE,QADH,YADO,YADH,YADC,YADA,QADG,YADG,QADA,QADE,QADF,QADD,YADF,YADA,QADF,QADM,YADV,YADC,YADF,QADI,QADL,YADO,YADG,QADA,QADA,YADF,QADC,YADF,YADF,YADA,YADC,YADD,YADW,YADX,YADC,YADD,YADG,QADH,YADI,YADL,YADH,YADA,QADC,YADG,YADF,YADC,YADJ,YADO,QADN,YADD,YADK,YADL,YADM,YADD,YADF,QADI,YADA,YADF,QADC,QADH,QADA,QADI,YADH,YADE,QADG,QADA,QADA,QADA,YADD,YADF,YADH,YADG,YADA,QADI,YADH,YADF,YADD,QADC,YADD,YADK,QADL,QADA,QADJ,YADG,YADC,QADM,YADT,YADI,QADC,QADD,YADE,YADF,YADJ,YADK,QADN,YADU,KADT,YADC,YADD,YADA,QADK,QADN,YADQ,YADH,IAFE","sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *        \n */\n\n/* eslint no-bitwise: 0 */\n\n'use strict';\n\nfunction normalizeColor(color) {\n  if (typeof color === 'number') {\n    if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {\n      return color;\n    }\n    return null;\n  }\n\n  if (typeof color !== 'string') {\n    return null;\n  }\n\n  const matchers = getMatchers();\n  let match;\n\n  // Ordered based on occurrences on Facebook codebase\n  if ((match = matchers.hex6.exec(color))) {\n    return parseInt(match[1] + 'ff', 16) >>> 0;\n  }\n\n  const colorFromKeyword = normalizeKeyword(color);\n  if (colorFromKeyword != null) {\n    return colorFromKeyword;\n  }\n\n  if ((match = matchers.rgb.exec(color))) {\n    return (\n      ((parse255(match[1]) << 24) | // r\n        (parse255(match[2]) << 16) | // g\n        (parse255(match[3]) << 8) | // b\n        0x000000ff) >>> // a\n      0\n    );\n  }\n\n  if ((match = matchers.rgba.exec(color))) {\n    // rgba(R G B / A) notation\n    if (match[6] !== undefined) {\n      return (\n        ((parse255(match[6]) << 24) | // r\n          (parse255(match[7]) << 16) | // g\n          (parse255(match[8]) << 8) | // b\n          parse1(match[9])) >>> // a\n        0\n      );\n    }\n\n    // rgba(R, G, B, A) notation\n    return (\n      ((parse255(match[2]) << 24) | // r\n        (parse255(match[3]) << 16) | // g\n        (parse255(match[4]) << 8) | // b\n        parse1(match[5])) >>> // a\n      0\n    );\n  }\n\n  if ((match = matchers.hex3.exec(color))) {\n    return (\n      parseInt(\n        match[1] +\n          match[1] + // r\n          match[2] +\n          match[2] + // g\n          match[3] +\n          match[3] + // b\n          'ff', // a\n        16,\n      ) >>> 0\n    );\n  }\n\n  // https://drafts.csswg.org/css-color-4/#hex-notation\n  if ((match = matchers.hex8.exec(color))) {\n    return parseInt(match[1], 16) >>> 0;\n  }\n\n  if ((match = matchers.hex4.exec(color))) {\n    return (\n      parseInt(\n        match[1] +\n          match[1] + // r\n          match[2] +\n          match[2] + // g\n          match[3] +\n          match[3] + // b\n          match[4] +\n          match[4], // a\n        16,\n      ) >>> 0\n    );\n  }\n\n  if ((match = matchers.hsl.exec(color))) {\n    return (\n      (hslToRgb(\n        parse360(match[1]), // h\n        parsePercentage(match[2]), // s\n        parsePercentage(match[3]), // l\n      ) |\n        0x000000ff) >>> // a\n      0\n    );\n  }\n\n  if ((match = matchers.hsla.exec(color))) {\n    // hsla(H S L / A) notation\n    if (match[6] !== undefined) {\n      return (\n        (hslToRgb(\n          parse360(match[6]), // h\n          parsePercentage(match[7]), // s\n          parsePercentage(match[8]), // l\n        ) |\n          parse1(match[9])) >>> // a\n        0\n      );\n    }\n\n    // hsla(H, S, L, A) notation\n    return (\n      (hslToRgb(\n        parse360(match[2]), // h\n        parsePercentage(match[3]), // s\n        parsePercentage(match[4]), // l\n      ) |\n        parse1(match[5])) >>> // a\n      0\n    );\n  }\n\n  if ((match = matchers.hwb.exec(color))) {\n    return (\n      (hwbToRgb(\n        parse360(match[1]), // h\n        parsePercentage(match[2]), // w\n        parsePercentage(match[3]), // b\n      ) |\n        0x000000ff) >>> // a\n      0\n    );\n  }\n\n  return null;\n}\n\nfunction hue2rgb(p, q, t) {\n  if (t < 0) {\n    t += 1;\n  }\n  if (t > 1) {\n    t -= 1;\n  }\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  if (t < 1 / 2) {\n    return q;\n  }\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  return p;\n}\n\nfunction hslToRgb(h, s, l) {\n  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  const p = 2 * l - q;\n  const r = hue2rgb(p, q, h + 1 / 3);\n  const g = hue2rgb(p, q, h);\n  const b = hue2rgb(p, q, h - 1 / 3);\n\n  return (\n    (Math.round(r * 255) << 24) |\n    (Math.round(g * 255) << 16) |\n    (Math.round(b * 255) << 8)\n  );\n}\n\nfunction hwbToRgb(h, w, b) {\n  if (w + b >= 1) {\n    const gray = Math.round((w * 255) / (w + b));\n\n    return (gray << 24) | (gray << 16) | (gray << 8);\n  }\n\n  const red = hue2rgb(0, 1, h + 1 / 3) * (1 - w - b) + w;\n  const green = hue2rgb(0, 1, h) * (1 - w - b) + w;\n  const blue = hue2rgb(0, 1, h - 1 / 3) * (1 - w - b) + w;\n\n  return (\n    (Math.round(red * 255) << 24) |\n    (Math.round(green * 255) << 16) |\n    (Math.round(blue * 255) << 8)\n  );\n}\n\nconst NUMBER = '[-+]?\\\\d*\\\\.?\\\\d+';\nconst PERCENTAGE = NUMBER + '%';\n\nfunction call(...args) {\n  return '\\\\(\\\\s*(' + args.join(')\\\\s*,?\\\\s*(') + ')\\\\s*\\\\)';\n}\n\nfunction callWithSlashSeparator(...args) {\n  return (\n    '\\\\(\\\\s*(' +\n    args.slice(0, args.length - 1).join(')\\\\s*,?\\\\s*(') +\n    ')\\\\s*/\\\\s*(' +\n    args[args.length - 1] +\n    ')\\\\s*\\\\)'\n  );\n}\n\nfunction commaSeparatedCall(...args) {\n  return '\\\\(\\\\s*(' + args.join(')\\\\s*,\\\\s*(') + ')\\\\s*\\\\)';\n}\n\nlet cachedMatchers;\n\nfunction getMatchers() {\n  if (cachedMatchers === undefined) {\n    cachedMatchers = {\n      rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),\n      rgba: new RegExp(\n        'rgba(' +\n          commaSeparatedCall(NUMBER, NUMBER, NUMBER, NUMBER) +\n          '|' +\n          callWithSlashSeparator(NUMBER, NUMBER, NUMBER, NUMBER) +\n          ')',\n      ),\n      hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),\n      hsla: new RegExp(\n        'hsla(' +\n          commaSeparatedCall(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) +\n          '|' +\n          callWithSlashSeparator(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) +\n          ')',\n      ),\n      hwb: new RegExp('hwb' + call(NUMBER, PERCENTAGE, PERCENTAGE)),\n      hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex6: /^#([0-9a-fA-F]{6})$/,\n      hex8: /^#([0-9a-fA-F]{8})$/,\n    };\n  }\n  return cachedMatchers;\n}\n\nfunction parse255(str) {\n  const int = parseInt(str, 10);\n  if (int < 0) {\n    return 0;\n  }\n  if (int > 255) {\n    return 255;\n  }\n  return int;\n}\n\nfunction parse360(str) {\n  const int = parseFloat(str);\n  return (((int % 360) + 360) % 360) / 360;\n}\n\nfunction parse1(str) {\n  const num = parseFloat(str);\n  if (num < 0) {\n    return 0;\n  }\n  if (num > 1) {\n    return 255;\n  }\n  return Math.round(num * 255);\n}\n\nfunction parsePercentage(str) {\n  // parseFloat conveniently ignores the final %\n  const int = parseFloat(str);\n  if (int < 0) {\n    return 0;\n  }\n  if (int > 100) {\n    return 1;\n  }\n  return int / 100;\n}\n\nfunction normalizeKeyword(name) {\n  // prettier-ignore\n  switch (name) {\n    case 'transparent': return 0x00000000;\n    // http://www.w3.org/TR/css3-color/#svg-color\n    case 'aliceblue': return 0xf0f8ffff;\n    case 'antiquewhite': return 0xfaebd7ff;\n    case 'aqua': return 0x00ffffff;\n    case 'aquamarine': return 0x7fffd4ff;\n    case 'azure': return 0xf0ffffff;\n    case 'beige': return 0xf5f5dcff;\n    case 'bisque': return 0xffe4c4ff;\n    case 'black': return 0x000000ff;\n    case 'blanchedalmond': return 0xffebcdff;\n    case 'blue': return 0x0000ffff;\n    case 'blueviolet': return 0x8a2be2ff;\n    case 'brown': return 0xa52a2aff;\n    case 'burlywood': return 0xdeb887ff;\n    case 'burntsienna': return 0xea7e5dff;\n    case 'cadetblue': return 0x5f9ea0ff;\n    case 'chartreuse': return 0x7fff00ff;\n    case 'chocolate': return 0xd2691eff;\n    case 'coral': return 0xff7f50ff;\n    case 'cornflowerblue': return 0x6495edff;\n    case 'cornsilk': return 0xfff8dcff;\n    case 'crimson': return 0xdc143cff;\n    case 'cyan': return 0x00ffffff;\n    case 'darkblue': return 0x00008bff;\n    case 'darkcyan': return 0x008b8bff;\n    case 'darkgoldenrod': return 0xb8860bff;\n    case 'darkgray': return 0xa9a9a9ff;\n    case 'darkgreen': return 0x006400ff;\n    case 'darkgrey': return 0xa9a9a9ff;\n    case 'darkkhaki': return 0xbdb76bff;\n    case 'darkmagenta': return 0x8b008bff;\n    case 'darkolivegreen': return 0x556b2fff;\n    case 'darkorange': return 0xff8c00ff;\n    case 'darkorchid': return 0x9932ccff;\n    case 'darkred': return 0x8b0000ff;\n    case 'darksalmon': return 0xe9967aff;\n    case 'darkseagreen': return 0x8fbc8fff;\n    case 'darkslateblue': return 0x483d8bff;\n    case 'darkslategray': return 0x2f4f4fff;\n    case 'darkslategrey': return 0x2f4f4fff;\n    case 'darkturquoise': return 0x00ced1ff;\n    case 'darkviolet': return 0x9400d3ff;\n    case 'deeppink': return 0xff1493ff;\n    case 'deepskyblue': return 0x00bfffff;\n    case 'dimgray': return 0x696969ff;\n    case 'dimgrey': return 0x696969ff;\n    case 'dodgerblue': return 0x1e90ffff;\n    case 'firebrick': return 0xb22222ff;\n    case 'floralwhite': return 0xfffaf0ff;\n    case 'forestgreen': return 0x228b22ff;\n    case 'fuchsia': return 0xff00ffff;\n    case 'gainsboro': return 0xdcdcdcff;\n    case 'ghostwhite': return 0xf8f8ffff;\n    case 'gold': return 0xffd700ff;\n    case 'goldenrod': return 0xdaa520ff;\n    case 'gray': return 0x808080ff;\n    case 'green': return 0x008000ff;\n    case 'greenyellow': return 0xadff2fff;\n    case 'grey': return 0x808080ff;\n    case 'honeydew': return 0xf0fff0ff;\n    case 'hotpink': return 0xff69b4ff;\n    case 'indianred': return 0xcd5c5cff;\n    case 'indigo': return 0x4b0082ff;\n    case 'ivory': return 0xfffff0ff;\n    case 'khaki': return 0xf0e68cff;\n    case 'lavender': return 0xe6e6faff;\n    case 'lavenderblush': return 0xfff0f5ff;\n    case 'lawngreen': return 0x7cfc00ff;\n    case 'lemonchiffon': return 0xfffacdff;\n    case 'lightblue': return 0xadd8e6ff;\n    case 'lightcoral': return 0xf08080ff;\n    case 'lightcyan': return 0xe0ffffff;\n    case 'lightgoldenrodyellow': return 0xfafad2ff;\n    case 'lightgray': return 0xd3d3d3ff;\n    case 'lightgreen': return 0x90ee90ff;\n    case 'lightgrey': return 0xd3d3d3ff;\n    case 'lightpink': return 0xffb6c1ff;\n    case 'lightsalmon': return 0xffa07aff;\n    case 'lightseagreen': return 0x20b2aaff;\n    case 'lightskyblue': return 0x87cefaff;\n    case 'lightslategray': return 0x778899ff;\n    case 'lightslategrey': return 0x778899ff;\n    case 'lightsteelblue': return 0xb0c4deff;\n    case 'lightyellow': return 0xffffe0ff;\n    case 'lime': return 0x00ff00ff;\n    case 'limegreen': return 0x32cd32ff;\n    case 'linen': return 0xfaf0e6ff;\n    case 'magenta': return 0xff00ffff;\n    case 'maroon': return 0x800000ff;\n    case 'mediumaquamarine': return 0x66cdaaff;\n    case 'mediumblue': return 0x0000cdff;\n    case 'mediumorchid': return 0xba55d3ff;\n    case 'mediumpurple': return 0x9370dbff;\n    case 'mediumseagreen': return 0x3cb371ff;\n    case 'mediumslateblue': return 0x7b68eeff;\n    case 'mediumspringgreen': return 0x00fa9aff;\n    case 'mediumturquoise': return 0x48d1ccff;\n    case 'mediumvioletred': return 0xc71585ff;\n    case 'midnightblue': return 0x191970ff;\n    case 'mintcream': return 0xf5fffaff;\n    case 'mistyrose': return 0xffe4e1ff;\n    case 'moccasin': return 0xffe4b5ff;\n    case 'navajowhite': return 0xffdeadff;\n    case 'navy': return 0x000080ff;\n    case 'oldlace': return 0xfdf5e6ff;\n    case 'olive': return 0x808000ff;\n    case 'olivedrab': return 0x6b8e23ff;\n    case 'orange': return 0xffa500ff;\n    case 'orangered': return 0xff4500ff;\n    case 'orchid': return 0xda70d6ff;\n    case 'palegoldenrod': return 0xeee8aaff;\n    case 'palegreen': return 0x98fb98ff;\n    case 'paleturquoise': return 0xafeeeeff;\n    case 'palevioletred': return 0xdb7093ff;\n    case 'papayawhip': return 0xffefd5ff;\n    case 'peachpuff': return 0xffdab9ff;\n    case 'peru': return 0xcd853fff;\n    case 'pink': return 0xffc0cbff;\n    case 'plum': return 0xdda0ddff;\n    case 'powderblue': return 0xb0e0e6ff;\n    case 'purple': return 0x800080ff;\n    case 'rebeccapurple': return 0x663399ff;\n    case 'red': return 0xff0000ff;\n    case 'rosybrown': return 0xbc8f8fff;\n    case 'royalblue': return 0x4169e1ff;\n    case 'saddlebrown': return 0x8b4513ff;\n    case 'salmon': return 0xfa8072ff;\n    case 'sandybrown': return 0xf4a460ff;\n    case 'seagreen': return 0x2e8b57ff;\n    case 'seashell': return 0xfff5eeff;\n    case 'sienna': return 0xa0522dff;\n    case 'silver': return 0xc0c0c0ff;\n    case 'skyblue': return 0x87ceebff;\n    case 'slateblue': return 0x6a5acdff;\n    case 'slategray': return 0x708090ff;\n    case 'slategrey': return 0x708090ff;\n    case 'snow': return 0xfffafaff;\n    case 'springgreen': return 0x00ff7fff;\n    case 'steelblue': return 0x4682b4ff;\n    case 'tan': return 0xd2b48cff;\n    case 'teal': return 0x008080ff;\n    case 'thistle': return 0xd8bfd8ff;\n    case 'tomato': return 0xff6347ff;\n    case 'turquoise': return 0x40e0d0ff;\n    case 'violet': return 0xee82eeff;\n    case 'wheat': return 0xf5deb3ff;\n    case 'white': return 0xffffffff;\n    case 'whitesmoke': return 0xf5f5f5ff;\n    case 'yellow': return 0xffff00ff;\n    case 'yellowgreen': return 0x9acd32ff;\n  }\n  return null;\n}\n\nmodule.exports = normalizeColor;\n"],"x_facebook_sources":[null],"x_hermes_function_offsets":{"0":[0,80,208,1344,1475,1678,1959,1997,2085,2123,2529,2570,2612,2675,2719]}}