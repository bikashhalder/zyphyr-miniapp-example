{"version":3,"sources":["webpack://org-mini-app/node_modules/react-native/Libraries/Components/TextInput/AndroidTextInputNativeComponent.js","webpack://org-mini-app/node_modules/react-native/Libraries/Components/TextInput/RCTSingelineTextInputNativeComponent.js","webpack://org-mini-app/node_modules/react-native/Libraries/Components/TextInput/RCTTextInputViewConfig.js","webpack://org-mini-app/node_modules/react-native/Libraries/Components/TextInput/TextInputState.js","webpack://org-mini-app/node_modules/react-native/Libraries/StyleSheet/flattenStyle.js","webpack://org-mini-app/node_modules/react-native/Libraries/Utilities/codegenNativeCommands.js","webpack://org-mini-app/node_modules/react-native/Libraries/Utilities/differ/deepDiffer.js"],"names":["_codegenNativeCommands","Commands","require","__INTERNAL_VIEW_CONFIG","_default","_RCTTextInputViewConfig","_ViewConfigIgnore","findNodeHandle","Platform","currentlyFocusedInputRef","Set","inputs","_textField_currentProps","focusInput","_AndroidTextInputNativeComponent","_RCTSingelineTextInputNativeComponent","blurInput","Array","style","i","flattenStyle","dispatchCommand","commandObj","options","command","deepDiffer","logListeners","ref","one","two","maxDepth","ii"],"mappings":"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","sourcesContent":["                                                                                              \n                                                                                            \n                                                                                                                            \n                                                       \n                                                                         \nimport * as NativeComponentRegistry from '../../NativeComponent/NativeComponentRegistry';\nimport codegenNativeCommands from '../../Utilities/codegenNativeCommands';\n                                                                                                                                                                                                                                         \n                                                                                                                                                                    \n                                                                    \n                                      \n                                  \n                         \n       \nn                           \n                         \n                                 \n                                                                                   \n                                      \n                            \n                              \n                                \n                                  \n                                                                                      \n                         \n                       \n                              \n                                 \n                      \n                                                      \n                                                     \n                     \n                       \n                                             \n                 \n       \n                                              \n                 \n       \n                                               \n                  \n                      \n                 \n       \n                                                   \n                  \n                      \n                 \n       \n                                                        \n                  \n                             \n                    \n                     \n        \n       \n                                                   \n                  \n                 \n       \n                                                      \n                  \n                           \n                    \n                  \n        \n       \n                                                      \n                  \n                 \n       \n                                                 \n                  \n                \n       \n                                             \n                  \n                                   \n                              \n                  \n                     \n                   \n                    \n        \n                               \n                \n                \n        \n                             \n                    \n                     \n        \n                                   \n                    \n                     \n        \n                          \n                \n                \n        \n       \n                           \n                                     \n                             \n                               \n                                     \n                           \n                 \n                 \n      \n                  \n                         \n                               \n                          \n                                   \n                         \n                         \n                               \n                                \n                            \n                               \n                      \n                                  \n                    \n                     \n      \n                      \n                          \n                 \n                         \n                    \n                      \n                                \n                       \n                       \n                              \n                            \n                              \n                 \n    \n                                             \n                                                          \nexport const Commands                 = codegenNativeCommands                ({\n  supportedCommands: ['focus', 'blur', 'setTextAndSelection']\n});\nexport const __INTERNAL_VIEW_CONFIG                    = {\n  uiViewClassName: 'AndroidTextInput',\n  bubblingEventTypes: {\n    topBlur: {\n      phasedRegistrationNames: {\n        bubbled: 'onBlur',\n        captured: 'onBlurCapture'\n      }\n    },\n    topEndEditing: {\n      phasedRegistrationNames: {\n        bubbled: 'onEndEditing',\n        captured: 'onEndEditingCapture'\n      }\n    },\n    topFocus: {\n      phasedRegistrationNames: {\n        bubbled: 'onFocus',\n        captured: 'onFocusCapture'\n      }\n    },\n    topKeyPress: {\n      phasedRegistrationNames: {\n        bubbled: 'onKeyPress',\n        captured: 'onKeyPressCapture'\n      }\n    },\n    topSubmitEditing: {\n      phasedRegistrationNames: {\n        bubbled: 'onSubmitEditing',\n        captured: 'onSubmitEditingCapture'\n      }\n    }\n  },\n  directEventTypes: {\n    topScroll: {\n      registrationName: 'onScroll'\n    }\n  },\n  validAttributes: {\n    maxFontSizeMultiplier: true,\n    adjustsFontSizeToFit: true,\n    minimumFontScale: true,\n    autoFocus: true,\n    placeholder: true,\n    inlineImagePadding: true,\n    contextMenuHidden: true,\n    textShadowColor: {\n      process: require('../../StyleSheet/processColor').default\n    },\n    maxLength: true,\n    selectTextOnFocus: true,\n    textShadowRadius: true,\n    underlineColorAndroid: {\n      process: require('../../StyleSheet/processColor').default\n    },\n    textDecorationLine: true,\n    submitBehavior: true,\n    textAlignVertical: true,\n    fontStyle: true,\n    textShadowOffset: true,\n    selectionColor: {\n      process: require('../../StyleSheet/processColor').default\n    },\n    selectionHandleColor: {\n      process: require('../../StyleSheet/processColor').default\n    },\n    placeholderTextColor: {\n      process: require('../../StyleSheet/processColor').default\n    },\n    importantForAutofill: true,\n    lineHeight: true,\n    textTransform: true,\n    returnKeyType: true,\n    keyboardType: true,\n    multiline: true,\n    color: {\n      process: require('../../StyleSheet/processColor').default\n    },\n    autoComplete: true,\n    numberOfLines: true,\n    letterSpacing: true,\n    returnKeyLabel: true,\n    fontSize: true,\n    onKeyPress: true,\n    cursorColor: {\n      process: require('../../StyleSheet/processColor').default\n    },\n    text: true,\n    showSoftInputOnFocus: true,\n    textAlign: true,\n    autoCapitalize: true,\n    autoCorrect: true,\n    caretHidden: true,\n    secureTextEntry: true,\n    textBreakStrategy: true,\n    onScroll: true,\n    onContentSizeChange: true,\n    disableFullscreenUI: true,\n    includeFontPadding: true,\n    fontWeight: true,\n    fontFamily: true,\n    allowFontScaling: true,\n    onSelectionChange: true,\n    mostRecentEventCount: true,\n    inlineImageLeft: true,\n    editable: true,\n    fontVariant: true,\n    borderBottomRightRadius: true,\n    borderBottomColor: {\n      process: require('../../StyleSheet/processColor').default\n    },\n    borderRadius: true,\n    borderRightColor: {\n      process: require('../../StyleSheet/processColor').default\n    },\n    borderColor: {\n      process: require('../../StyleSheet/processColor').default\n    },\n    borderTopRightRadius: true,\n    borderStyle: true,\n    borderBottomLeftRadius: true,\n    borderLeftColor: {\n      process: require('../../StyleSheet/processColor').default\n    },\n    borderTopLeftRadius: true,\n    borderTopColor: {\n      process: require('../../StyleSheet/processColor').default\n    }\n  }\n};\nlet AndroidTextInputNativeComponent = NativeComponentRegistry.get             ('AndroidTextInput', () => __INTERNAL_VIEW_CONFIG);\nexport default ((AndroidTextInputNativeComponent     )                            );","                                                                                              \n                                                                         \nimport * as NativeComponentRegistry from '../../NativeComponent/NativeComponentRegistry';\nimport codegenNativeCommands from '../../Utilities/codegenNativeCommands';\nimport RCTTextInputViewConfig from './RCTTextInputViewConfig';\n                                       \n                                                          \nexport const Commands                 = codegenNativeCommands                ({\n  supportedCommands: ['focus', 'blur', 'setTextAndSelection']\n});\nexport const __INTERNAL_VIEW_CONFIG                    = {\n  uiViewClassName: 'RCTSinglelineTextInputView',\n  ...RCTTextInputViewConfig\n};\nconst SinglelineTextInputNativeComponent                       = NativeComponentRegistry.get       ('RCTSinglelineTextInputView', () => __INTERNAL_VIEW_CONFIG);\nexport default ((SinglelineTextInputNativeComponent     )                      );","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict-local\n * @format\n */\n\n                                                                             \n\nimport {ConditionallyIgnoredEventHandlers} from '../../NativeComponent/ViewConfigIgnore';\n\n                                          \n                    \n                            \n  \n\nconst RCTTextInputViewConfig = {\n  bubblingEventTypes: {\n    topBlur: {\n      phasedRegistrationNames: {\n        bubbled: 'onBlur',\n        captured: 'onBlurCapture',\n      },\n    },\n    topChange: {\n      phasedRegistrationNames: {\n        bubbled: 'onChange',\n        captured: 'onChangeCapture',\n      },\n    },\n    topEndEditing: {\n      phasedRegistrationNames: {\n        bubbled: 'onEndEditing',\n        captured: 'onEndEditingCapture',\n      },\n    },\n    topFocus: {\n      phasedRegistrationNames: {\n        bubbled: 'onFocus',\n        captured: 'onFocusCapture',\n      },\n    },\n    topKeyPress: {\n      phasedRegistrationNames: {\n        bubbled: 'onKeyPress',\n        captured: 'onKeyPressCapture',\n      },\n    },\n    topSubmitEditing: {\n      phasedRegistrationNames: {\n        bubbled: 'onSubmitEditing',\n        captured: 'onSubmitEditingCapture',\n      },\n    },\n    topTouchCancel: {\n      phasedRegistrationNames: {\n        bubbled: 'onTouchCancel',\n        captured: 'onTouchCancelCapture',\n      },\n    },\n    topTouchEnd: {\n      phasedRegistrationNames: {\n        bubbled: 'onTouchEnd',\n        captured: 'onTouchEndCapture',\n      },\n    },\n\n    topTouchMove: {\n      phasedRegistrationNames: {\n        bubbled: 'onTouchMove',\n        captured: 'onTouchMoveCapture',\n      },\n    },\n  },\n  directEventTypes: {\n    topScroll: {\n      registrationName: 'onScroll',\n    },\n    topSelectionChange: {\n      registrationName: 'onSelectionChange',\n    },\n    topContentSizeChange: {\n      registrationName: 'onContentSizeChange',\n    },\n    topChangeSync: {\n      registrationName: 'onChangeSync',\n    },\n    topKeyPressSync: {\n      registrationName: 'onKeyPressSync',\n    },\n  },\n  validAttributes: {\n    dynamicTypeRamp: true,\n    fontSize: true,\n    fontWeight: true,\n    fontVariant: true,\n    // flowlint-next-line untyped-import:off\n    textShadowOffset: {diff: require('../../Utilities/differ/sizesDiffer')},\n    allowFontScaling: true,\n    fontStyle: true,\n    textTransform: true,\n    textAlign: true,\n    fontFamily: true,\n    lineHeight: true,\n    isHighlighted: true,\n    writingDirection: true,\n    textDecorationLine: true,\n    textShadowRadius: true,\n    letterSpacing: true,\n    textDecorationStyle: true,\n    textDecorationColor: {\n      process: require('../../StyleSheet/processColor').default,\n    },\n    color: {process: require('../../StyleSheet/processColor').default},\n    maxFontSizeMultiplier: true,\n    textShadowColor: {\n      process: require('../../StyleSheet/processColor').default,\n    },\n    editable: true,\n    inputAccessoryViewID: true,\n    inputAccessoryViewButtonLabel: true,\n    caretHidden: true,\n    enablesReturnKeyAutomatically: true,\n    placeholderTextColor: {\n      process: require('../../StyleSheet/processColor').default,\n    },\n    clearButtonMode: true,\n    keyboardType: true,\n    selection: true,\n    returnKeyType: true,\n    submitBehavior: true,\n    mostRecentEventCount: true,\n    scrollEnabled: true,\n    selectionColor: {process: require('../../StyleSheet/processColor').default},\n    contextMenuHidden: true,\n    secureTextEntry: true,\n    placeholder: true,\n    autoCorrect: true,\n    multiline: true,\n    textContentType: true,\n    maxLength: true,\n    autoCapitalize: true,\n    keyboardAppearance: true,\n    passwordRules: true,\n    spellCheck: true,\n    selectTextOnFocus: true,\n    text: true,\n    clearTextOnFocus: true,\n    showSoftInputOnFocus: true,\n    autoFocus: true,\n    lineBreakStrategyIOS: true,\n    lineBreakModeIOS: true,\n    smartInsertDelete: true,\n    ...ConditionallyIgnoredEventHandlers({\n      onChange: true,\n      onSelectionChange: true,\n      onContentSizeChange: true,\n      onScroll: true,\n      onChangeSync: true,\n      onKeyPressSync: true,\n    }),\n    disableKeyboardShortcuts: true,\n  },\n};\n\nmodule.exports = (RCTTextInputViewConfig                              );\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *       strict-local\n */\n\n// This class is responsible for coordinating the \"focused\" state for\n// TextInputs. All calls relating to the keyboard should be funneled\n// through here.\n\n             \n               \n                                   \n                                 \n                           \n                                               \n\nimport {Commands as AndroidTextInputCommands} from '../../Components/TextInput/AndroidTextInputNativeComponent';\nimport {Commands as iOSTextInputCommands} from '../../Components/TextInput/RCTSingelineTextInputNativeComponent';\n\nconst {findNodeHandle} = require('../../ReactNative/RendererProxy');\nconst Platform = require('../../Utilities/Platform');\n\nlet currentlyFocusedInputRef                = null;\nconst inputs = new Set  \n               \n                \n                                                    \n                                                                    \n                \n                                                \n                                              \n                        \n          \n                                           \n  ();\n\nfunction currentlyFocusedInput()                {\n  return currentlyFocusedInputRef;\n}\n\n/**\n * Returns the ID of the currently focused text field, if one exists\n * If no text field is focused it returns null\n */\nfunction currentlyFocusedField()          {\n  if (__DEV__) {\n    console.error(\n      'currentlyFocusedField is deprecated and will be removed in a future release. Use currentlyFocusedInput',\n    );\n  }\n\n  return findNodeHandle(currentlyFocusedInputRef);\n}\n\nfunction focusInput(textField               )       {\n  if (currentlyFocusedInputRef !== textField && textField != null) {\n    currentlyFocusedInputRef = textField;\n  }\n}\n\nfunction blurInput(textField               )       {\n  if (currentlyFocusedInputRef === textField && textField != null) {\n    currentlyFocusedInputRef = null;\n  }\n}\n\nfunction focusField(textFieldID         )       {\n  if (__DEV__) {\n    console.error('focusField no longer works. Use focusInput');\n  }\n\n  return;\n}\n\nfunction blurField(textFieldID         ) {\n  if (__DEV__) {\n    console.error('blurField no longer works. Use blurInput');\n  }\n\n  return;\n}\n\n/**\n * @param {number} TextInputID id of the text field to focus\n * Focuses the specified text field\n * noop if the text field was already focused or if the field is not editable\n */\nfunction focusTextInput(textField               ) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'focusTextInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return;\n  }\n\n  if (textField != null) {\n    const fieldCanBeFocused =\n      currentlyFocusedInputRef !== textField &&\n      // $FlowFixMe - `currentProps` is missing in `NativeMethods`\n      textField.currentProps?.editable !== false;\n\n    if (!fieldCanBeFocused) {\n      return;\n    }\n    focusInput(textField);\n    if (Platform.OS === 'ios') {\n      // This isn't necessarily a single line text input\n      // But commands don't actually care as long as the thing being passed in\n      // actually has a command with that name. So this should work with single\n      // and multiline text inputs. Ideally we'll merge them into one component\n      // in the future.\n      iOSTextInputCommands.focus(textField);\n    } else if (Platform.OS === 'android') {\n      AndroidTextInputCommands.focus(textField);\n    }\n  }\n}\n\n/**\n * @param {number} textFieldID id of the text field to unfocus\n * Unfocuses the specified text field\n * noop if it wasn't focused\n */\nfunction blurTextInput(textField               ) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'blurTextInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return;\n  }\n\n  if (currentlyFocusedInputRef === textField && textField != null) {\n    blurInput(textField);\n    if (Platform.OS === 'ios') {\n      // This isn't necessarily a single line text input\n      // But commands don't actually care as long as the thing being passed in\n      // actually has a command with that name. So this should work with single\n      // and multiline text inputs. Ideally we'll merge them into one component\n      // in the future.\n      iOSTextInputCommands.blur(textField);\n    } else if (Platform.OS === 'android') {\n      AndroidTextInputCommands.blur(textField);\n    }\n  }\n}\n\nfunction registerInput(textField              ) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'registerInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return;\n  }\n\n  inputs.add(textField);\n}\n\nfunction unregisterInput(textField              ) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'unregisterInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return;\n  }\n  inputs.delete(textField);\n}\n\nfunction isTextInput(textField              )          {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'isTextInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return false;\n  }\n\n  return inputs.has(textField);\n}\n\nmodule.exports = {\n  currentlyFocusedInput,\n  focusInput,\n  blurInput,\n\n  currentlyFocusedField,\n  focusField,\n  blurField,\n  focusTextInput,\n  blurTextInput,\n  registerInput,\n  unregisterInput,\n  isTextInput,\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict-local\n * @format\n */\n\n'use strict';\n\n                                                                \n                                                                     \n\nfunction flattenStyle                                           (\n  style             ,\n  // $FlowFixMe[underconstrained-implicit-instantiation]\n)                                             {\n  if (style === null || typeof style !== 'object') {\n    return undefined;\n  }\n\n  if (!Array.isArray(style)) {\n    // $FlowFixMe[incompatible-return]\n    return style;\n  }\n\n  const result                         = {};\n  for (let i = 0, styleLength = style.length; i < styleLength; ++i) {\n    // $FlowFixMe[underconstrained-implicit-instantiation]\n    const computedStyle = flattenStyle(style[i]);\n    if (computedStyle) {\n      // $FlowFixMe[invalid-in-rhs]\n      for (const key in computedStyle) {\n        // $FlowFixMe[incompatible-use]\n        // $FlowFixMe[invalid-computed-prop]\n        result[key] = computedStyle[key];\n      }\n    }\n  }\n  // $FlowFixMe[incompatible-return]\n  return result;\n}\n\nmodule.exports = flattenStyle;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *      \n */\n\nconst {dispatchCommand} = require('../ReactNative/RendererProxy');\n\n                                       \n                                       \n    \n\nfunction codegenNativeCommands                 (options                   )    {\n  const commandObj                                                   = {};\n\n  options.supportedCommands.forEach(command => {\n    // $FlowFixMe[missing-local-annot]\n    commandObj[command] = (ref, ...args) => {\n      // $FlowFixMe[incompatible-call]\n      dispatchCommand(ref, command, args);\n    };\n  });\n\n  return ((commandObj     )   );\n}\n\nexport default codegenNativeCommands;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n *      \n */\n\n'use strict';\n\nlet logListeners;\n\n                      \n                                                                             \n   \n\n                                                      \n\nfunction unstable_setLogListeners(listeners               ) {\n  logListeners = listeners;\n}\n\n/*\n * @returns {bool} true if different, false if equal\n */\nconst deepDiffer = function (\n  one     ,\n  two     ,\n  maxDepthOrOptions                   = -1,\n  maybeOptions          ,\n)          {\n  const options =\n    typeof maxDepthOrOptions === 'number' ? maybeOptions : maxDepthOrOptions;\n  const maxDepth =\n    typeof maxDepthOrOptions === 'number' ? maxDepthOrOptions : -1;\n  if (maxDepth === 0) {\n    return true;\n  }\n  if (one === two) {\n    // Short circuit on identical object references instead of traversing them.\n    return false;\n  }\n  if (typeof one === 'function' && typeof two === 'function') {\n    // We consider all functions equal unless explicitly configured otherwise\n    let unsafelyIgnoreFunctions = options?.unsafelyIgnoreFunctions;\n    if (unsafelyIgnoreFunctions == null) {\n      if (\n        logListeners &&\n        logListeners.onDifferentFunctionsIgnored &&\n        (!options || !('unsafelyIgnoreFunctions' in options))\n      ) {\n        logListeners.onDifferentFunctionsIgnored(one.name, two.name);\n      }\n      unsafelyIgnoreFunctions = true;\n    }\n    return !unsafelyIgnoreFunctions;\n  }\n  if (typeof one !== 'object' || one === null) {\n    // Primitives can be directly compared\n    return one !== two;\n  }\n  if (typeof two !== 'object' || two === null) {\n    // We know they are different because the previous case would have triggered\n    // otherwise.\n    return true;\n  }\n  if (one.constructor !== two.constructor) {\n    return true;\n  }\n  if (Array.isArray(one)) {\n    // We know two is also an array because the constructors are equal\n    const len = one.length;\n    if (two.length !== len) {\n      return true;\n    }\n    for (let ii = 0; ii < len; ii++) {\n      if (deepDiffer(one[ii], two[ii], maxDepth - 1, options)) {\n        return true;\n      }\n    }\n  } else {\n    for (const key in one) {\n      if (deepDiffer(one[key], two[key], maxDepth - 1, options)) {\n        return true;\n      }\n    }\n    for (const twoKey in two) {\n      // The only case we haven't checked yet is keys that are in two but aren't\n      // in one, which means they are different.\n      if (one[twoKey] === undefined && two[twoKey] !== undefined) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\ndeepDiffer.unstable_setLogListeners = unstable_setLogListeners;\nmodule.exports = deepDiffer;\n"],"x_facebook_sources":[null,null,null,null,null,null,null],"x_hermes_function_offsets":{"0":[0,152,950,959,968,977,986,1290,1299,1308,1317,1326,1993,2256,2265,2285,2313,2341,2345,2349,2515,2639,2678,2717,2754,2778,2907,3017,3050,3079,3114,3123,3158,3172]}}