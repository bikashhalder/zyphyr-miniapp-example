{"version":3,"sources":["webpack://org-mini-app/node_modules/react-native/src/private/featureflags/specs/NativeReactNativeFeatureFlags.js","webpack://org-mini-app/node_modules/react-native/src/private/featureflags/ReactNativeFeatureFlags.js","webpack://org-mini-app/node_modules/react-native/src/private/featureflags/ReactNativeFeatureFlagsBase.js"],"names":["_default","_ReactNativeFeatureFlagsBase","jsOnlyTestFlag","animatedShouldDebounceQueueFlush","animatedShouldUseSingleOp","disableInteractionManager","disableInteractionManagerInBatchinator","enableAccessToHostTreeInFabric","enableAnimatedAllowlist","enableAnimatedClearImmediateFix","enableAnimatedPropsMemo","fixVirtualizeListCollapseWindowSize","isLayoutAnimationEnabled","shouldSkipStateUpdatesForLoopingAnimations","shouldUseAnimatedObjectForTransform","shouldUseRemoveClippedSubviewsAsDefaultOnIOS","shouldUseSetNativePropsInFabric","useInsertionEffectsForAnimations","useRefsForTextInputState","commonTestFlag","commonTestFlagWithoutNativeImplementation","completeReactInstanceCreationOnBgThreadOnAndroid","disableEventLoopOnBridgeless","disableMountItemReorderingAndroid","enableAccumulatedUpdatesInRawPropsAndroid","enableBridgelessArchitecture","enableCppPropsIteratorSetter","enableDeletionOfUnmountedViews","enableEagerRootViewAttachment","enableEventEmitterRetentionDuringGesturesOnAndroid","enableFabricLogs","enableFabricRenderer","enableFixForViewCommandRace","enableGranularShadowTreeStateReconciliation","enableIOSViewClipToPaddingBox","enableImagePrefetchingAndroid","enableLayoutAnimationsOnAndroid","enableLayoutAnimationsOnIOS","enableLongTaskAPI","enableNewBackgroundAndBorderDrawables","enablePreciseSchedulingForPremountItemsOnAndroid","enablePropsUpdateReconciliationAndroid","enableReportEventPaintTime","enableSynchronousStateUpdates","enableUIConsistency","enableViewRecycling","excludeYogaFromRawProps","fixDifferentiatorEmittingUpdatesWithWrongParentTag","fixMappingOfEventPrioritiesBetweenFabricAndReact","fixMountingCoordinatorReportedPendingTransactionsOnAndroid","fuseboxEnabledRelease","initEagerTurboModulesOnNativeModulesQueueAndroid","lazyAnimationCallbacks","loadVectorDrawablesOnImages","traceTurboModulePromiseRejectionsOnAndroid","useAlwaysAvailableJSErrorHandling","useFabricInterop","useImmediateExecutorInAndroidBridgeless","useNativeViewConfigsInBridgelessMode","useOptimisedViewPreallocationOnAndroid","useOptimizedEventBatchingOnAndroid","useRawPropsJsiValue","useRuntimeShadowNodeReferenceUpdate","useTurboModuleInterop","useTurboModules","override","Set","accessedFeatureFlags","reportedConfigNames","cachedValue","customValueGetter","defaultValue","createGetter","configName","overrides","_NativeReactNativeFeatureFlags","logUnavailableNativeModuleError","Array","Error","console","createJavaScriptFlagGetter","createNativeFlagGetter","getOverrides","setOverrides"],"mappings":"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","sourcesContent":["                                                                               \nimport * as TurboModuleRegistry from '../../../../Libraries/TurboModule/TurboModuleRegistry';\n                                           \n                                  \n                                                             \n                                                                    \n                                                \n                                                     \n                                                             \n                                                \n                                                \n                                                  \n                                                 \n                                                                      \n                                    \n                                        \n                                               \n                                                               \n                                                 \n                                                 \n                                                   \n                                               \n                                     \n                                                         \n                                                                    \n                                                          \n                                              \n                                                 \n                                       \n                                       \n                                           \n                                                                      \n                                                                    \n                                                                              \n                                         \n                                                                    \n                                          \n                                               \n                                                              \n                                                     \n                                    \n                                                           \n                                                        \n                                                          \n                                                      \n                                       \n                                                       \n                                         \n                                   \n \nconst NativeReactNativeFeatureFlags        = TurboModuleRegistry.get      ('NativeReactNativeFeatureFlagsCxx');\nexport default NativeReactNativeFeatureFlags;","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @generated SignedSource<<3037cf1c938dae492b656333cec9633c>>\n *       strict\n */\n\n/**\n * IMPORTANT: Do NOT modify this file directly.\n *\n * To change the definition of the flags, edit\n *   packages/react-native/scripts/featureflags/ReactNativeFeatureFlags.config.js.\n *\n * To regenerate this code, run the following script from the repo root:\n *   yarn featureflags --update\n */\n\nimport {\n              \n                    \n  createJavaScriptFlagGetter,\n  createNativeFlagGetter,\n  setOverrides,\n} from './ReactNativeFeatureFlagsBase';\n\n                                                       \n                                  \n                                                    \n                                             \n                                             \n                                                          \n                                                  \n                                           \n                                                   \n                                           \n                                                       \n                                            \n                                                              \n                                                       \n                                                                \n                                                   \n                                                    \n                                            \n   \n\n                                                                                                 \n\n                                                 \n                                   \n                                  \n                                                             \n                                                                    \n                                                \n                                                     \n                                                             \n                                                \n                                                \n                                                  \n                                                 \n                                                                      \n                                    \n                                        \n                                               \n                                                               \n                                                 \n                                                 \n                                                   \n                                               \n                                     \n                                                         \n                                                                    \n                                                          \n                                              \n                                                 \n                                       \n                                       \n                                           \n                                                                      \n                                                                    \n                                                                              \n                                         \n                                                                    \n                                          \n                                               \n                                                              \n                                                     \n                                    \n                                                           \n                                                        \n                                                          \n                                                      \n                                       \n                                                       \n                                         \n                                   \n   \n\n/**\n * JS-only flag for testing. Do NOT modify.\n */\nexport const jsOnlyTestFlag                  = createJavaScriptFlagGetter('jsOnlyTestFlag', false);\n\n/**\n * Enables an experimental flush-queue debouncing in Animated.js.\n */\nexport const animatedShouldDebounceQueueFlush                  = createJavaScriptFlagGetter('animatedShouldDebounceQueueFlush', false);\n\n/**\n * Enables an experimental mega-operation for Animated.js that replaces many calls to native with a single call into native, to reduce JSI/JNI traffic.\n */\nexport const animatedShouldUseSingleOp                  = createJavaScriptFlagGetter('animatedShouldUseSingleOp', false);\n\n/**\n * Disables InteractionManager and replaces its scheduler with `setImmediate`.\n */\nexport const disableInteractionManager                  = createJavaScriptFlagGetter('disableInteractionManager', false);\n\n/**\n * Skips InteractionManager in `Batchinator` and invokes callbacks synchronously.\n */\nexport const disableInteractionManagerInBatchinator                  = createJavaScriptFlagGetter('disableInteractionManagerInBatchinator', false);\n\n/**\n * Enables access to the host tree in Fabric using DOM-compatible APIs.\n */\nexport const enableAccessToHostTreeInFabric                  = createJavaScriptFlagGetter('enableAccessToHostTreeInFabric', false);\n\n/**\n * Enables Animated to skip non-allowlisted props and styles.\n */\nexport const enableAnimatedAllowlist                  = createJavaScriptFlagGetter('enableAnimatedAllowlist', true);\n\n/**\n * Enables an experimental to use the proper clearIntermediate instead of calling the wrong clearTimeout and canceling another timer.\n */\nexport const enableAnimatedClearImmediateFix                  = createJavaScriptFlagGetter('enableAnimatedClearImmediateFix', true);\n\n/**\n * Enables Animated to analyze props to minimize invalidating `AnimatedProps`.\n */\nexport const enableAnimatedPropsMemo                  = createJavaScriptFlagGetter('enableAnimatedPropsMemo', true);\n\n/**\n * Fixing an edge case where the current window size is not properly calculated with fast scrolling. Window size collapsed to 1 element even if windowSize more than the current amount of elements\n */\nexport const fixVirtualizeListCollapseWindowSize                  = createJavaScriptFlagGetter('fixVirtualizeListCollapseWindowSize', false);\n\n/**\n * Function used to enable / disabled Layout Animations in React Native.\n */\nexport const isLayoutAnimationEnabled                  = createJavaScriptFlagGetter('isLayoutAnimationEnabled', true);\n\n/**\n * If the animation is within Animated.loop, we do not send state updates to React.\n */\nexport const shouldSkipStateUpdatesForLoopingAnimations                  = createJavaScriptFlagGetter('shouldSkipStateUpdatesForLoopingAnimations', true);\n\n/**\n * Enables use of AnimatedObject for animating transform values.\n */\nexport const shouldUseAnimatedObjectForTransform                  = createJavaScriptFlagGetter('shouldUseAnimatedObjectForTransform', false);\n\n/**\n * removeClippedSubviews prop will be used as the default in FlatList on iOS to match Android\n */\nexport const shouldUseRemoveClippedSubviewsAsDefaultOnIOS                  = createJavaScriptFlagGetter('shouldUseRemoveClippedSubviewsAsDefaultOnIOS', false);\n\n/**\n * Enables use of setNativeProps in JS driven animations.\n */\nexport const shouldUseSetNativePropsInFabric                  = createJavaScriptFlagGetter('shouldUseSetNativePropsInFabric', true);\n\n/**\n * Changes construction of the animation graph to `useInsertionEffect` instead of `useLayoutEffect`.\n */\nexport const useInsertionEffectsForAnimations                  = createJavaScriptFlagGetter('useInsertionEffectsForAnimations', true);\n\n/**\n * Enable a variant of TextInput that moves some state to refs to avoid unnecessary re-renders\n */\nexport const useRefsForTextInputState                  = createJavaScriptFlagGetter('useRefsForTextInputState', false);\n\n/**\n * Common flag for testing. Do NOT modify.\n */\nexport const commonTestFlag                  = createNativeFlagGetter('commonTestFlag', false);\n/**\n * Common flag for testing (without native implementation). Do NOT modify.\n */\nexport const commonTestFlagWithoutNativeImplementation                  = createNativeFlagGetter('commonTestFlagWithoutNativeImplementation', false);\n/**\n * Do not wait for a main-thread dispatch to complete init to start executing work on the JS thread on Android\n */\nexport const completeReactInstanceCreationOnBgThreadOnAndroid                  = createNativeFlagGetter('completeReactInstanceCreationOnBgThreadOnAndroid', true);\n/**\n * The bridgeless architecture enables the event loop by default. This feature flag allows us to force disabling it in specific instances.\n */\nexport const disableEventLoopOnBridgeless                  = createNativeFlagGetter('disableEventLoopOnBridgeless', false);\n/**\n * Prevent FabricMountingManager from reordering mountitems, which may lead to invalid state on the UI thread\n */\nexport const disableMountItemReorderingAndroid                  = createNativeFlagGetter('disableMountItemReorderingAndroid', false);\n/**\n * When enabled, Andoid will accumulate updates in rawProps to reduce the number of mounting instructions for cascading rerenders.\n */\nexport const enableAccumulatedUpdatesInRawPropsAndroid                  = createNativeFlagGetter('enableAccumulatedUpdatesInRawPropsAndroid', false);\n/**\n * Feature flag to enable the new bridgeless architecture. Note: Enabling this will force enable the following flags: `useTurboModules` & `enableFabricRenderer.\n */\nexport const enableBridgelessArchitecture                  = createNativeFlagGetter('enableBridgelessArchitecture', false);\n/**\n * Enable prop iterator setter-style construction of Props in C++ (this flag is not used in Java).\n */\nexport const enableCppPropsIteratorSetter                  = createNativeFlagGetter('enableCppPropsIteratorSetter', false);\n/**\n * Deletes views that were pre-allocated but never mounted on the screen.\n */\nexport const enableDeletionOfUnmountedViews                  = createNativeFlagGetter('enableDeletionOfUnmountedViews', false);\n/**\n * Feature flag to configure eager attachment of the root view/initialisation of the JS code.\n */\nexport const enableEagerRootViewAttachment                  = createNativeFlagGetter('enableEagerRootViewAttachment', false);\n/**\n * Enables the retention of EventEmitterWrapper on Android till the touch gesture is over to fix a bug on pressable (#44610)\n */\nexport const enableEventEmitterRetentionDuringGesturesOnAndroid                  = createNativeFlagGetter('enableEventEmitterRetentionDuringGesturesOnAndroid', false);\n/**\n * This feature flag enables logs for Fabric.\n */\nexport const enableFabricLogs                  = createNativeFlagGetter('enableFabricLogs', false);\n/**\n * Enables the use of the Fabric renderer in the whole app.\n */\nexport const enableFabricRenderer                  = createNativeFlagGetter('enableFabricRenderer', false);\n/**\n * Synchronise the view command dispatching with mounting of new transaction\n */\nexport const enableFixForViewCommandRace                  = createNativeFlagGetter('enableFixForViewCommandRace', false);\n/**\n * When enabled, the renderer would only fail commits when they propagate state and the last commit that updated state changed before committing.\n */\nexport const enableGranularShadowTreeStateReconciliation                  = createNativeFlagGetter('enableGranularShadowTreeStateReconciliation', false);\n/**\n * iOS Views will clip to their padding box vs border box\n */\nexport const enableIOSViewClipToPaddingBox                  = createNativeFlagGetter('enableIOSViewClipToPaddingBox', false);\n/**\n * When enabled, Andoid will build and initiate image prefetch requests on ImageShadowNode::layout\n */\nexport const enableImagePrefetchingAndroid                  = createNativeFlagGetter('enableImagePrefetchingAndroid', false);\n/**\n * When enabled, LayoutAnimations API will animate state changes on Android.\n */\nexport const enableLayoutAnimationsOnAndroid                  = createNativeFlagGetter('enableLayoutAnimationsOnAndroid', false);\n/**\n * When enabled, LayoutAnimations API will animate state changes on iOS.\n */\nexport const enableLayoutAnimationsOnIOS                  = createNativeFlagGetter('enableLayoutAnimationsOnIOS', true);\n/**\n * Enables the reporting of long tasks through `PerformanceObserver`. Only works if the event loop is enabled.\n */\nexport const enableLongTaskAPI                  = createNativeFlagGetter('enableLongTaskAPI', false);\n/**\n * Use BackgroundDrawable and BorderDrawable instead of CSSBackgroundDrawable\n */\nexport const enableNewBackgroundAndBorderDrawables                  = createNativeFlagGetter('enableNewBackgroundAndBorderDrawables', false);\n/**\n * Moves execution of pre-mount items to outside the choregrapher in the main thread, so we can estimate idle time more precisely (Android only).\n */\nexport const enablePreciseSchedulingForPremountItemsOnAndroid                  = createNativeFlagGetter('enablePreciseSchedulingForPremountItemsOnAndroid', false);\n/**\n * When enabled, Android will receive prop updates based on the differences between the last rendered shadow node and the last committed shadow node.\n */\nexport const enablePropsUpdateReconciliationAndroid                  = createNativeFlagGetter('enablePropsUpdateReconciliationAndroid', false);\n/**\n * Report paint time inside the Event Timing API implementation (PerformanceObserver).\n */\nexport const enableReportEventPaintTime                  = createNativeFlagGetter('enableReportEventPaintTime', false);\n/**\n * Dispatches state updates synchronously in Fabric (e.g.: updates the scroll position in the shadow tree synchronously from the main thread).\n */\nexport const enableSynchronousStateUpdates                  = createNativeFlagGetter('enableSynchronousStateUpdates', false);\n/**\n * Ensures that JavaScript always has a consistent view of the state of the UI (e.g.: commits done in other threads are not immediately propagated to JS during its execution).\n */\nexport const enableUIConsistency                  = createNativeFlagGetter('enableUIConsistency', false);\n/**\n * Enables View Recycling. When enabled, individual ViewManagers must still opt-in.\n */\nexport const enableViewRecycling                  = createNativeFlagGetter('enableViewRecycling', false);\n/**\n * When enabled, rawProps in Props will not include Yoga specific props.\n */\nexport const excludeYogaFromRawProps                  = createNativeFlagGetter('excludeYogaFromRawProps', false);\n/**\n * Fixes a bug in Differentiator where parent views may be referenced before they're created\n */\nexport const fixDifferentiatorEmittingUpdatesWithWrongParentTag                  = createNativeFlagGetter('fixDifferentiatorEmittingUpdatesWithWrongParentTag', true);\n/**\n * Uses the default event priority instead of the discreet event priority by default when dispatching events from Fabric to React.\n */\nexport const fixMappingOfEventPrioritiesBetweenFabricAndReact                  = createNativeFlagGetter('fixMappingOfEventPrioritiesBetweenFabricAndReact', false);\n/**\n * Fixes a limitation on Android where the mounting coordinator would report there are no pending transactions but some of them were actually not processed due to the use of the push model.\n */\nexport const fixMountingCoordinatorReportedPendingTransactionsOnAndroid                  = createNativeFlagGetter('fixMountingCoordinatorReportedPendingTransactionsOnAndroid', false);\n/**\n * Flag determining if the React Native DevTools (Fusebox) CDP backend should be enabled in release builds. This flag is global and should not be changed across React Host lifetimes.\n */\nexport const fuseboxEnabledRelease                  = createNativeFlagGetter('fuseboxEnabledRelease', false);\n/**\n * Construct modules that requires eager init on the dedicate native modules thread\n */\nexport const initEagerTurboModulesOnNativeModulesQueueAndroid                  = createNativeFlagGetter('initEagerTurboModulesOnNativeModulesQueueAndroid', true);\n/**\n * Only enqueue Choreographer calls if there is an ongoing animation, instead of enqueueing every frame.\n */\nexport const lazyAnimationCallbacks                  = createNativeFlagGetter('lazyAnimationCallbacks', false);\n/**\n * Adds support for loading vector drawable assets in the Image component (only on Android)\n */\nexport const loadVectorDrawablesOnImages                  = createNativeFlagGetter('loadVectorDrawablesOnImages', true);\n/**\n * Enables storing js caller stack when creating promise in native module. This is useful in case of Promise rejection and tracing the cause.\n */\nexport const traceTurboModulePromiseRejectionsOnAndroid                  = createNativeFlagGetter('traceTurboModulePromiseRejectionsOnAndroid', false);\n/**\n * In Bridgeless mode, use the always available javascript error reporting pipeline.\n */\nexport const useAlwaysAvailableJSErrorHandling                  = createNativeFlagGetter('useAlwaysAvailableJSErrorHandling', false);\n/**\n * Should this application enable the Fabric Interop Layer for Android? If yes, the application will behave so that it can accept non-Fabric components and render them on Fabric. This toggle is controlling extra logic such as custom event dispatching that are needed for the Fabric Interop Layer to work correctly.\n */\nexport const useFabricInterop                  = createNativeFlagGetter('useFabricInterop', false);\n/**\n * Invoke callbacks immediately on the ReactInstance rather than going through a background thread for synchronization\n */\nexport const useImmediateExecutorInAndroidBridgeless                  = createNativeFlagGetter('useImmediateExecutorInAndroidBridgeless', true);\n/**\n * When enabled, the native view configs are used in bridgeless mode.\n */\nexport const useNativeViewConfigsInBridgelessMode                  = createNativeFlagGetter('useNativeViewConfigsInBridgelessMode', false);\n/**\n * Moves more of the work in view preallocation to the main thread to free up JS thread.\n */\nexport const useOptimisedViewPreallocationOnAndroid                  = createNativeFlagGetter('useOptimisedViewPreallocationOnAndroid', false);\n/**\n * Uses an optimized mechanism for event batching on Android that does not need to wait for a Choreographer frame callback.\n */\nexport const useOptimizedEventBatchingOnAndroid                  = createNativeFlagGetter('useOptimizedEventBatchingOnAndroid', false);\n/**\n * Instead of using folly::dynamic as internal representation in RawProps and RawValue, use jsi::Value\n */\nexport const useRawPropsJsiValue                  = createNativeFlagGetter('useRawPropsJsiValue', false);\n/**\n * When enabled, cloning shadow nodes within react native will update the reference held by the current JS fiber tree.\n */\nexport const useRuntimeShadowNodeReferenceUpdate                  = createNativeFlagGetter('useRuntimeShadowNodeReferenceUpdate', true);\n/**\n * In Bridgeless mode, should legacy NativeModules use the TurboModule system?\n */\nexport const useTurboModuleInterop                  = createNativeFlagGetter('useTurboModuleInterop', false);\n/**\n * When enabled, NativeModules will be executed by using the TurboModule system\n */\nexport const useTurboModules                  = createNativeFlagGetter('useTurboModules', false);\n\n/**\n * Overrides the feature flags with the provided methods.\n * NOTE: Only JS-only flags can be overridden from JavaScript using this API.\n */\nexport const override = setOverrides;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict\n * @format\n */\n\n             \n                                \n                                         \n                                   \n\nimport NativeReactNativeFeatureFlags from './specs/NativeReactNativeFeatureFlags';\n\nconst accessedFeatureFlags              = new Set();\nlet overrides                                         ;\n\n                                \n\n// This defines the types for the overrides object, whose methods also receive\n// the default value as a parameter.\n                                       \n                                                               \n   \n\nfunction createGetter                              (\n  configName        ,\n  customValueGetter            ,\n  defaultValue   ,\n)            {\n  let cachedValue    ;\n\n  return () => {\n    if (cachedValue == null) {\n      cachedValue = customValueGetter() ?? defaultValue;\n    }\n    return cachedValue;\n  };\n}\n\nexport function createJavaScriptFlagGetter \n                                          \n (\n  configName   ,\n  defaultValue                                              ,\n)                                                       {\n  return createGetter(\n    configName,\n    () => {\n      accessedFeatureFlags.add(configName);\n      return overrides?.[configName]?.(defaultValue);\n    },\n    defaultValue,\n  );\n}\n\n                                                                              \n\nexport function createNativeFlagGetter                              (\n  configName   ,\n  defaultValue                                                  ,\n)                                                           {\n  return createGetter(\n    configName,\n    () => {\n      const valueFromNative = NativeReactNativeFeatureFlags?.[configName]?.();\n      if (valueFromNative == null) {\n        logUnavailableNativeModuleError(configName);\n      }\n      return valueFromNative;\n    },\n    defaultValue,\n  );\n}\n\nexport function getOverrides()                                          {\n  return overrides;\n}\n\nexport function setOverrides(\n  newOverrides                                        ,\n)       {\n  if (overrides != null) {\n    throw new Error('Feature flags cannot be overridden more than once');\n  }\n\n  if (accessedFeatureFlags.size > 0) {\n    const accessedFeatureFlagsStr = Array.from(accessedFeatureFlags).join(', ');\n    throw new Error(\n      `Feature flags were accessed before being overridden: ${accessedFeatureFlagsStr}`,\n    );\n  }\n\n  overrides = newOverrides;\n}\n\nconst reportedConfigNames              = new Set();\n\nfunction logUnavailableNativeModuleError(configName        )       {\n  if (!reportedConfigNames.has(configName)) {\n    reportedConfigNames.add(configName);\n    console.error(\n      `Could not access feature flag '${configName}' because native module method was not available`,\n    );\n  }\n}\n"],"x_facebook_sources":[null,null,null],"x_hermes_function_offsets":{"0":[0,104,235,244,2142,2151,2160,2169,2178,2187,2196,2205,2214,2223,2232,2241,2250,2259,2268,2277,2286,2295,2304,2313,2322,2331,2340,2349,2358,2367,2376,2385,2394,2403,2412,2421,2430,2439,2448,2457,2466,2475,2484,2493,2502,2511,2520,2529,2538,2547,2556,2565,2574,2583,2592,2601,2610,2619,2628,2637,2646,2655,2664,2673,2682,2691,2700,2709,2718,3007,3030,3071,3110,3206,3241,3354,3363,3520,3604,3613,3622,3631]}}